buildscript {
  ext.kotlin_version = '1.3.72'
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
  }
  dependencies {
    classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:2.4.3"
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "edu.sc.seis.launch4j"

apply plugin: 'idea'
idea.module.downloadJavadoc = true
idea.module.downloadSources = true

repositories {
  mavenCentral()
  maven { url "http://dl.bintray.com/kotlin/ktor" }
  maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

configurations.create('ivy') // old configuration used by ant

dependencies {
  ivy 'junit:junit-dep:4.11'
  ivy 'junit-addons:junit-addons:1.4'
  compile 'org.jsoup:jsoup:1.7.3'
  compile 'javazoom:jlayer:1.0.1'
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  compile 'org.slf4j:slf4j-api:1.7.30'
  compile 'ch.qos.logback:logback-classic:1.2.3'
  compile 'ch.qos.logback:logback-core:1.2.3'
  compile 'org.apache.httpcomponents:httpclient:4.5.12'
  testCompile 'junit:junit-dep:4.11'
  testCompile 'junit-addons:junit-addons:1.4'
  testCompile 'org.assertj:assertj-core:3.7.0'
  testCompile 'io.ktor:ktor-server-core:0.9.1'
  testCompile 'io.ktor:ktor-server-netty:0.9.1'
  testCompile 'io.ktor:ktor-html-builder:0.9.1'
  testCompile 'org.slf4j:slf4j-jdk14:1.7.25'
  //testCompile 'org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.7'
}

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

ant.importBuild "build.xml"
ant.references['ivy.path'] = ant.path(path: configurations.ivy.files.join(';'))

tasks.clean.dependsOn 'ant-clean'
tasks.comp.dependsOn 'compileJava'
tasks['ant-jar'].dependsOn 'jar'
tasks.junit.dependsOn 'junit-local'
tasks.junit.dependsOn 'junit-www'

sourceSets.main.java.srcDir 'src'
sourceSets.main.resources.srcDir 'resource'
sourceSets.test.java.srcDir 'junit-tests'

tasks.withType(JavaCompile) {
  options.encoding = "utf-8"
}

jar {
  baseName = 'PbnTools'
  manifest {
    attributes(
      "Manifest-Version": "1.0",
      "Main-Class": "jc.pbntools.PbnTools",
      "Class-Path": configurations.compile.files.collect {
        it.getName()
      }.join(" ")
    )
  }
}

task 'clean-doc' {
  doLast {
    file('doc/help_en.html').delete()
    file('doc/help_pl.html').delete()
  }
}
tasks['doc'].mustRunAfter 'clean-doc'

task 'junit-prereq' {
  dependsOn 'fillLibDir'
  doLast {
    file('work/junit-tmp').deleteDir()
    file('work').mkdir()
    file('work/junit-tmp').mkdir()
    file('work/junit-tmp/postprocess').mkdir()
  }
}

task 'junit-local' (type: Test) {
  group = 'pbntools'
  dependsOn 'junit-prereq'
  filter {
    includeTestsMatching 'jc.fTests'
    includeTestsMatching 'jc.SoupProxyTests'
    includeTestsMatching 'jc.pbntools.PbnToolsTests'
  }
}

task 'junit-www' (type: Test, dependsOn: ['startWwwServerMaybe']) {
  group = 'pbntools'
  dependsOn 'junit-prereq'
  if (System.getProperty("os.name").startsWith("Windows"))
    systemProperties['wget.path'] = new File(rootDir, "\\lib\\wget\\wget.exe")
  doFirst {
    println 'junit-www tests, prerequisites:'
    println '1. serve test/*www* directories at http://localhost/pbntools'
    println '   (use install_www_tests.sh)'
    println '2. turn off internet (suggestion only)'
  }
  //TODO <junitpreset timeout="20000" >
  filter {
    includeTestsMatching 'jc.pbntools.PbnToolsWwwTests'
  }
  doLast {
    "cmd /c gradlew --no-daemon startWwwServerAndWait".execute()
  }
}

task startWwwServerAndWait (type: JavaExec) {
  classpath = sourceSets.test.runtimeClasspath
  main = 'jc.wwwserver.WwwServerKt'
  args 'start'
  ignoreExitValue = true
  doLast {
    println "startWwwServerAndWait finished."
  }
}

task startWwwServerMaybe (dependsOn: 'compileTestKotlin') {
  doFirst {
    def url = "http://localhost:15863"
    println "Is server working? (gradlew startWwwServerAndWait)"
    try {
      println "Test content: " + new URL(url).content.text
    } catch (java.net.ConnectException e) {
      println e
      println "Server not working, spawning a new server"
      "cmd /c gradlew --no-daemon startWwwServerAndWait".execute()
      Thread.sleep(30000)
      println "Test content $url: " + new URL(url).content.text
    }
  }
}

task stopWwwServer (type: JavaExec) {
  doFirst {
    println "Stopping www server and waiting..."
  }
  classpath = sourceSets.test.runtimeClasspath
  main = 'jc.wwwserver.WwwServerKt'
  args 'stop'
  doLast {
    Thread.sleep(3000)
    println "stopWwwServer doesn't wait any more."
  }
}

task 'junit-single' (type: Test) {
  filter {
    includeTestsMatching '*.pobierzBboTest6'
  }
}

tasks['junit'].group = 'pbntools'

tasks.withType(Test) {
  outputs.upToDateWhen {false}
  testLogging.showStandardStreams = true
  testLogging.exceptionFormat = 'full'
  jvmArgs '-Duser.language=en'
}

task run(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'jc.pbntools.PbnTools'
  jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7779"
}

task fillLibDir(type: Copy, dependsOn: ['fillLibDir2', 'fillLibDir3']) {
  from configurations.compile.files
  into 'lib'
}

task fillLibDir2(type: Copy) {
  from 'release_files'
  exclude 'doc'
  exclude 'linux'
  into 'lib'
}

task fillLibDir3(type: Copy) {
  from 'release_files/doc'
  into 'doc'
}

def launcherConfigurationClosure = {
  outfile = 'PbnTools.exe'
  jar = 'PbnTools.jar'
  dontWrapJar = true
  errTitle = 'PbnTools'
  supportUrl = 'http://jarek.katowice.pl/pbntools'
  stayAlive = true
  icon = project.rootDir.toString() + '/resource/pik_nieb_zol.ico'
  jreMinVersion = '1.6.0'
  version = ant.properties['wersja'] + '.' + ant.properties['build.number']
  textVersion = version
  fileDescription = "PbnTools - a bridge player's toolkit"
  copyright = 'Copyright (C) 2010-2021 jarekczek'
  productName = 'PbnTools'
  companyName = 'jarekczek'
  internalName = 'PbnTools'
  jvmOptions = [ "-Dlogback.configurationFile=logback.xml" ]
}

task launcherInternal(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {}
task launcherExternal(type: edu.sc.seis.launch4j.tasks.Launch4jExternalTask) {}
task launcher() {
  group = 'pbntools'
}
tasks.launcher.dependsOn 'set-filenames'
launcherConfigurationClosure.rehydrate(null, tasks.launcherInternal, null).call()
launcherConfigurationClosure.rehydrate(null, tasks.launcherExternal, null).call()
if (hasProperty('launch4jCmd')) {
  tasks.launcherExternal.launch4jCmd = ext.launch4jCmd
  tasks.launcher.dependsOn 'launcherExternal'
} else {
  tasks.launcher.dependsOn 'launcherInternal'
}

task release(dependsOn: ['releaseLinux', 'releaseWindows']) {
  group = 'pbntools'
}

task 'release-noInc'(dependsOn: ['dontIncBuildnumer', 'release'])

task commonReleaseDeps(dependsOn: ['set-filenames', 'ant-release'])
tasks['ant-release'].dependsOn 'fillLibDir'

task releaseWindows(dependsOn: ['launcher', 'commonReleaseDeps']) {
  doLast {
    tasks['zip-windows'].executeAntTarget()
  }
}
task releaseLinux(dependsOn: 'commonReleaseDeps') {
  doLast {
    tasks['zip-linux'].executeAntTarget()
  }
}

tasks.test.doFirst {
  throw new RuntimeException("Use tasks: junit, junit-local, junit-www.")
}