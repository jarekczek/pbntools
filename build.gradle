buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:2.4.3"
  }
}

apply plugin: 'java'
apply plugin: "edu.sc.seis.launch4j"

repositories {
  mavenCentral()
}

configurations.create('ivy') // old configuration used by ant

dependencies {
  ivy 'junit:junit-dep:4.11'
  ivy 'junit-addons:junit-addons:1.4'
  compile 'org.jsoup:jsoup:1.7.3'
  compile 'javazoom:jlayer:1.0.1'
  testCompile 'junit:junit-dep:4.11'
  testCompile 'junit-addons:junit-addons:1.4'
}

ant.importBuild "build.xml"
ant.references['ivy.path'] = ant.path(path: configurations.ivy.files.join(';'))

tasks.clean.dependsOn 'ant-clean'
tasks.comp.dependsOn 'compileJava'
tasks['ant-jar'].dependsOn 'jar'
tasks.junit.dependsOn 'junit-local'
tasks.junit.dependsOn 'junit-www'

sourceSets.main.java.srcDir 'src'
sourceSets.main.resources.srcDir 'resource'
sourceSets.test.java.srcDir 'junit-tests'

println project.jar

jar {
  baseName = 'PbnTools'
  manifest {
    attributes(
      "Manifest-Version": "1.0",
      "Main-Class": "jc.pbntools.PbnTools",
      "Class-Path": configurations.compile.files.collect {
        it.getName()
      }.join(" ")
    )
  }
}

task 'junit-local' (type: Test) {
  filter {
    includeTestsMatching 'jc.fTests'
    includeTestsMatching 'jc.SoupProxyTests'
    includeTestsMatching 'jc.pbntools.PbnToolsTests'
  }
}

task 'junit-www' (type: Test) {
  doFirst {
    println 'junit-www tests, prerequisites:'
    println '1. serve test/*www* directories at http://localhost/pbntools'
    println '   (use install_www_tests.sh)'
    println '2. turn off internet (suggestion only)'
  }
  //TODO <junitpreset timeout="20000" >
  filter {
    includeTestsMatching 'jc.pbntools.PbnToolsWwwTests'
  }
}

tasks.withType(Test) {
  outputs.upToDateWhen {false}
  testLogging.showStandardStreams = true
  testLogging.exceptionFormat = 'full'
}

task run(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'jc.pbntools.PbnTools'
  jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7779"
}

task fillLibDir(type: Copy, dependsOn: ['fillLibDir2', 'fillLibDir3']) {
  from configurations.compile.files
  into 'lib'
}

task fillLibDir2(type: Copy) {
  from 'release_files'
  exclude 'doc'
  into 'lib'
}

task fillLibDir3(type: Copy) {
  from 'release_files/doc'
  into 'doc'
}

def launcherConfigurationClosure = {
  outfile = 'PbnTools.exe'
  jar = 'PbnTools.jar'
  dontWrapJar = true
  errTitle = 'PbnTools'
  supportUrl = 'http://jarek.katowice.pl/pbntools'
  stayAlive = true
  icon = project.rootDir.toString() + '/resource/pik_nieb_zol.ico'
  jreMinVersion = '1.6.0'
  version = ant.properties['wersja'] + '.' + ant.properties['build.number']
  textVersion = version
  fileDescription = "PbnTools - a bridge player's toolkit"
  copyright = 'Copyright (C) 2010-2018 jarekczek'
  productName = 'PbnTools'
  companyName = 'jarekczek'
  internalName = 'PbnTools'
}

task launcherInternal(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {}
task launcherExternal(type: edu.sc.seis.launch4j.tasks.Launch4jExternalTask) {}
task launcher() {
  group = 'pbntools'
}
tasks.launcher.dependsOn 'set-filenames'
launcherConfigurationClosure.rehydrate(null, tasks.launcherInternal, null).call()
launcherConfigurationClosure.rehydrate(null, tasks.launcherExternal, null).call()
if (hasProperty('xlaunch4jCmd'))
  tasks.launcher.dependsOn 'launcherInternal'
else {
  tasks.launcherExternal.launch4jCmd = ext.launch4jCmd
  tasks.launcher.dependsOn 'launcherExternal'
}

task release(dependsOn: ['fillLibDir', 'ant-release', 'releaseLinux', 'releaseWindows']) {
  group = 'pbntools'
}

task 'release-noInc'(dependsOn: ['dontIncBuildnumer', 'release'])

task commonReleaseDeps(dependsOn: 'set-filenames')

task releaseWindows(dependsOn: ['launcher', 'commonReleaseDeps']) {
  doLast {
    tasks['zip-windows'].executeAntTarget()
  }
}
task releaseLinux(dependsOn: 'commonReleaseDeps') {
  doLast {
    tasks['zip-linux'].executeAntTarget()
  }
}
