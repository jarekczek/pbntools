/* *****************************************************************************

    Copyright (C) 2012 Jaroslaw Czekalski - jarekczek@poczta.onet.pl

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
   *****************************************************************************
*/

package jc.pbntools;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintStream;
import java.io.Writer;
import jc.f;
import jc.pbntools.download.HtmlTourDownloader;
import jc.pbntools.download.KopsTourDownloader;
import jc.pbntools.download.ParyTourDownloader;
import junitx.framework.FileAssert;
import org.junit.*;
import static org.junit.Assert.*;

public class PbnToolsTests
{

private static PrintStream origOut;

@Test public void checkUpdateTest()
             throws java.io.IOException, jc.SoupProxy.Exception
  {
    String sCurrentVer = PbnTools.m_res.getString("wersja");
    // when taking PbnTools classes directly from classes dir,
    // we get path work/comp/jc here, so 3 times .. is needed
    String sHelpPath = f.basePath(this.getClass()) + f.sDirSep + ".."
                       + f.sDirSep + ".." + f.sDirSep + ".."
                       + f.sDirSep + "doc" + f.sDirSep;
    String sHelpUrl = "file://" + sHelpPath + "help_pl.html";
    // System.out.println(sHelpUrl);
    String sHtmlVer = PbnTools.getVersionFromUrl(sHelpUrl);
    assertTrue("versions do not match: current=" + sCurrentVer
               + ", html:" + sHtmlVer, sCurrentVer.equals(sHtmlVer));
  }

@Test public void getBaseUrlTest()
{
  String asUrl[] = { "http://test.com/start",
                     "http://test.com/start/",
                     "http://test.com/start/index.html",
                     "http://test.com/start/test.htm" };
  for (String sUrl: asUrl) {
    assertEquals("getBaseUrl(" + sUrl + ")",
                 "http://test.com/start/",
                 HtmlTourDownloader.getBaseUrl(sUrl));
  }

  String sUrl = "http://www.halo.com/test/";
  assertEquals("getBaseUrl(" + sUrl,
               sUrl, HtmlTourDownloader.getBaseUrl(sUrl));
}

@Test public void pobierzParyTest()
  throws java.io.FileNotFoundException, java.io.IOException
{
  File fTempDir = new File("work/junit-tmp");
  fTempDir.mkdir();
  System.setProperty("jc.debug", "0");
  PbnTools.m_props.setProperty("workDir", fTempDir.toString());
  PbnTools.downTour("test/test_1_pary/WB120802/wb120802.html",
    new ParyTourDownloader(), false);
  FileAssert.assertEquals("Resulting pbn files",
    new File("test/test_1_pary/WB120802/wb120802.pbn"),
    new File(fTempDir, "WB120802/wb120802.pbn"));
}

// pobierzKopsTest {{{
/** To compare older pbn files, generated by bash script, some contents
  * must be removed */
void makePbnNakedAsFromBash(File file)
  throws java.io.IOException
{
  String asTagsToRemove[] = new String[] { "Event", "West", "East", "North",
    "South", "Scoring" };
  String sCont = f.readFile(file.toString());
  String sTags = "(";
  for (String sTag: asTagsToRemove) {
    if (sTags.length() > 1)
      sTags += "|";
    sTags += "(" + sTag + ")";
  }
  sTags += ")";
  sCont = sCont.replaceAll("\\[" + sTags + ".*[\r\n]+", "");
  sCont = sCont.replaceAll("(\\[Board \")([0-9]\")", "$10$2");
  // swap order of Declared and Contract
  sCont = sCont.replaceAll(
    "\\[Declarer (\".*\")\\]([\r\n]+)\\[Contract (\".*\")\\]",
    "[Contract $3]$2[Declarer $1]");
  // bash used lowercase x for double
  sCont = sCont.replaceAll("Contract \"(.*)(XX)\"", "Contract \"$1xx\"");
  sCont = sCont.replaceAll("Contract \"(.*)(X)\"", "Contract \"$1x\"");
  // bash started cards always from N
  sCont = sCont.replaceAll("Deal \"E:(.*) (.*) (.*) (.*)\"",
    "Deal \"N:$4 $1 $2 $3\"");
  sCont = sCont.replaceAll("Deal \"S:(.*) (.*) (.*) (.*)\"",
    "Deal \"N:$3 $4 $1 $2\"");
  sCont = sCont.replaceAll("Deal \"W:(.*) (.*) (.*) (.*)\"",
    "Deal \"N:$2 $3 $4 $1\"");
  // vulnerability - different wording
  sCont = sCont.replaceAll("Vulnerable \"All\"", "Vulnerable \"Both\"");

  Writer bw = new FileWriter(file.toString());
  bw.write(sCont);
  bw.close();
}

@Test public void pobierzKopsTest()
  throws java.io.FileNotFoundException, java.io.IOException
{
  File fTempDir = new File("work/junit-tmp");
  fTempDir.mkdir();
  System.setProperty("jc.debug", "0");
  PbnTools.m_props.setProperty("workDir", fTempDir.toString());
  PbnTools.downTour("test/test_2_kops/PCH1003/index.html",
    new KopsTourDownloader(), false);
  makePbnNakedAsFromBash(new File(fTempDir, "PCH1003/pch1003.pbn"));
  
  // the pbn file from bash also needs adjusting, so copying it
  File fOrig = new File("test/test_2_kops/PCH1003/PCH1003.pbn");
  File fOrig2 = new File(fTempDir, "PCH1003/pch1003_0.pbn");
  String sOrigCont = f.readFile(fOrig.toString());
  BufferedWriter bw = new BufferedWriter(new FileWriter(fOrig2));
  bw.write(sOrigCont);
  bw.close();
  makePbnNakedAsFromBash(fOrig2);

  FileAssert.assertEquals("Resulting pbn files",
    fOrig2,
    new File(fTempDir, "PCH1003/pch1003.pbn"));
} //}}}

}
